{"version":3,"sources":["Header.jsx","z.js","Question.jsx","Column.jsx","Questions.jsx","Teams.jsx","QuestionModal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","create","set","get","team","selected","setSelected","setTeam","score","t1","t2","t3","setScore","localStorage","setItem","JSON","stringify","scoreLastUpdated","lastUpdated","Date","toString","setScoreLastUpdated","resetScore","useZ","Question","memo","props","value","question","z","handleClick","useCallback","onClick","Column","name","questions","map","qid","id","key","shortid","generate","answers","Questions","data","category","Teams","t","e","target","QuestionModal","useState","showingAnswer","setShowingAnswer","handleClose","bottom","answer","role","aria-label","App","getScoreFromLs","localStorageScore","parse","getItem","console","log","useEffect","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e466a3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return <div className=\"header\">YOPARDY</div>;\n};\n\nexport default Header;\n","import create from \"zustand\";\n\nconst [useZ] = create((set, get) => ({\n  team: \"t1\",\n  selected: \"\",\n  setSelected: selected => {\n    set({ selected });\n  },\n  setTeam: team => set({ team }),\n  score: {\n    t1: 0,\n    t2: 0,\n    t3: 0\n  },\n  setScore: score => {\n    localStorage.setItem(\"score\", JSON.stringify(score));\n    const scoreLastUpdated = {\n      score: score,\n      lastUpdated: new Date().toString()\n    };\n    set({ scoreLastUpdated });\n    set({ score });\n  },\n  scoreLastUpdated: {\n    score: {\n      t1: 0,\n      t2: 0,\n      t3: 0\n    },\n    lastUpdated: new Date().toString()\n  },\n  setScoreLastUpdated: scoreLastUpdated => set({ scoreLastUpdated }),\n  resetScore: () => {\n    const score = {\n      t1: 0,\n      t2: 0,\n      t3: 0\n    };\n    localStorage.setItem(\"score\", JSON.stringify(score));\n    set({ score });\n  }\n}));\n\nexport default useZ;\n","import React, { memo, useCallback } from \"react\";\nimport useZ from \"./z\";\n\nconst Question = memo(props => {\n  const { value, question } = props;\n  const setSelected = useZ(z => z.setSelected);\n\n  const handleClick = useCallback(() => {\n    setSelected(question);\n  }, [setSelected, question]);\n\n  return (\n    <>\n      <div onClick={handleClick} className=\"question\">\n        {value}\n      </div>\n    </>\n  );\n});\n\nexport default Question;\n","import React from \"react\";\nimport Question from \"./Question\";\nimport shortid from \"shortid\";\n\nconst Column = props => {\n  const { name, questions } = props;\n\n  const renderQuestions = () => {\n    return questions.map(question => (\n      <Question\n        qid={question.id}\n        key={shortid.generate()}\n        value={question.value}\n        question={question}\n        answers={question.answers}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"column\">\n      <div className=\"column-header\">{name}</div>\n      {renderQuestions()}\n    </div>\n  );\n};\n\nexport default Column;\n","import React from \"react\";\nimport Column from \"./Column\";\nimport data from \"./data.json\";\nimport shortid from \"shortid\";\n\nconst Questions = () => {\n  const renderColumns = () => {\n    return data.map(category => (\n      <Column\n        key={shortid.generate()}\n        name={category.name}\n        questions={category.questions}\n      />\n    ));\n  };\n\n  return <div className=\"questions\">{renderColumns()}</div>;\n};\n\nexport default Questions;\n","import React, { useCallback, memo } from \"react\";\nimport useZ from \"./z\";\n\nconst Teams = memo(() => {\n  const setTeam = useZ(z => z.setTeam);\n  const team = useZ(z => z.team);\n  const score = useZ(z => z.score);\n\n  const handleClick = useCallback(\n    t => {\n      setTeam(t);\n    },\n    [setTeam]\n  );\n\n  return (\n    <div className=\"teams\">\n      <div\n        onClick={e => {\n          handleClick(e.target.id);\n        }}\n        className=\"team\"\n        id=\"t1\"\n      >\n        Team 1 <div className=\"score-display\">{score.t1}</div>{\" \"}\n        {team === \"t1\" && \"üî•\"}\n      </div>\n      <div\n        onClick={e => {\n          handleClick(e.target.id);\n        }}\n        className=\"team\"\n        id=\"t2\"\n      >\n        Team 2 <div className=\"score-display\">{score.t2}</div>\n        {team === \"t2\" && \"üî•\"}\n      </div>\n      <div\n        onClick={e => {\n          handleClick(e.target.id);\n        }}\n        className=\"team\"\n        id=\"t3\"\n      >\n        Team 3 <div className=\"score-display\">{score.t3}</div>{\" \"}\n        {team === \"t3\" && \"üî•\"}\n      </div>\n    </div>\n  );\n});\n\nexport default Teams;\n","import React, { useState } from \"react\";\nimport useZ from \"./z\";\nimport Fade from \"react-reveal/Fade\";\n\nconst QuestionModal = props => {\n  const setSelected = useZ(z => z.setSelected);\n  const selected = useZ(z => z.selected);\n  const setScore = useZ(z => z.setScore);\n  const score = useZ(z => z.score);\n  const team = useZ(z => z.team);\n  const [showingAnswer, setShowingAnswer] = useState(false);\n\n  const handleClose = () => {\n    setSelected(null);\n    setShowingAnswer(!showingAnswer);\n  };\n\n  const handleScore = () => {\n    setScore({ ...score, [team]: score[team] + selected.value });\n    handleClose();\n  };\n\n  const handleShowAnswer = () => {\n    setShowingAnswer(!showingAnswer);\n  };\n\n  return (\n    <div className=\"question-modal\">\n      <Fade bottom>\n        <div className=\"question-modal-question\">{selected.question}</div>\n        {showingAnswer ? (\n          <Fade bottom>\n            <div className=\"question-modal-answer\">{selected.answer}</div>\n            <button onClick={handleScore} className=\"team-button\">\n              Hell yeah!\n            </button>\n          </Fade>\n        ) : (\n          <button onClick={handleShowAnswer}> SHOW ANSWER </button>\n        )}\n\n        <button onClick={handleClose} className=\"question-modal-close-button\">\n          CLOSE\n          <span role=\"img\" aria-label=\"red cross\">\n            ‚ùå\n          </span>\n        </button>\n      </Fade>\n    </div>\n  );\n};\n\nexport default QuestionModal;\n","import React, { useEffect, useCallback } from \"react\";\nimport Header from \"./Header\";\nimport Questions from \"./Questions\";\nimport Teams from \"./Teams\";\nimport QuestionModal from \"./QuestionModal\";\nimport \"./App.css\";\nimport useZ from \"./z\";\nimport moment from \"moment\";\n\nfunction App() {\n  const score = useZ(z => z.score);\n  const setScore = useZ(z => z.setScore);\n  const resetScore = useZ(z => z.resetScore);\n  const team = useZ(z => z.team);\n  const selected = useZ(z => z.selected);\n  const scoreLastUpdated = useZ(z => z.scoreLastUpdated);\n\n  const getScoreFromLs = useCallback(() => {\n    const localStorageScore = JSON.parse(localStorage.getItem(\"score\"));\n    console.log(localStorageScore);\n    if (localStorageScore) setScore(localStorageScore);\n  }, [setScore]);\n\n  const handleResetScore = () => {\n    resetScore();\n  };\n\n  useEffect(() => {\n    console.log(score);\n    console.log(team);\n    console.log(scoreLastUpdated);\n  }, [score, team, scoreLastUpdated]);\n\n  useEffect(() => {\n    getScoreFromLs();\n  }, [getScoreFromLs]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Questions />\n      <Teams />\n      {selected && <QuestionModal />}\n      <div className=\"score-last-updated\">\n        SCORE LAST UPDATED:{\" \"}\n        {moment(scoreLastUpdated.lastUpdated).format(\"MMMM Do YYYY, h:mm:ss a\")}\n      </div>\n      <button onClick={handleResetScore} className=\"reset-score-button\">\n        RESET SCORE\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}